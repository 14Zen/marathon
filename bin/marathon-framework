#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: marathon-framework (--jar <marathon.jar>) (executor|scheduler)

  Run the Marathon scheduler or executor.

USAGE
}; function --help { -h ;}
export LC_ALL=en_US.UTF-8

self="$(cd "$(dirname "$0")" && pwd -P)"/"$(basename "$0")"
marathon_jar=/opt/marathon/marathon.jar

function main {
  case "$1" in
    --jar) marathon_jar="$2" ; shift 2 ;;
  esac
  "$@"
}

function scheduler {
  local args=( mesosphere.marathon.Main )
  [[ ! -s /etc/mesos/zk ]] ||
    args+=( --zk_hosts "$(cut -d / -f 3 /etc/mesos/zk)"
            --master "$(cat /etc/mesos/zk)" )
  [[ ! -s /etc/marathon/ip ]] || args+=( --hostname "$(cat /etc/marathon/ip)" )
  logged marathon go_marathon "${args[@]}" "$@"
}

function executor {
  logged marathon/executor go_marathon \
         mesosphere.marathon.executor.MarathonExecutor "$@"
}

function go_marathon {
  local log_format='%2$s %5$s%6$s%n' # Class name, message, exception
  ulimit -n 8192
  export PATH=/usr/local/bin:"$PATH"
  exec java -Xmx512m \
            -Djava.library.path=/usr/local/lib \
            -Djava.util.logging.SimpleFormatter.format="$log_format" \
            -cp "$marathon_jar" "$@"
}

function logged {
  local token="$1[$$]" ; shift
  exec 1> >(exec logger -p user.info   -t "$token")
  exec 2> >(exec logger -p user.notice -t "$token")
  "$@"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi
